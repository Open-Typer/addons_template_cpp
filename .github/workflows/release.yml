name: Release

on:
  push:
    tags: '*'

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            qt-version: '5.12.8'
            qt-target: 'desktop'
          - os: windows-latest
            qt-version: '5.15.2'
            qt-target: 'desktop'
            qt-mingw-version: 81
            mingw-version: '8.1.0'
          - os: windows-latest
            qt-version: '6.4.2'
            qt-target: 'desktop'
            qt-mingw-version: ''
            mingw-version: '11.2.0'
          - os: macos-latest
            qt-version: '6.4.2'
            qt-target: 'desktop'
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - name: Get OS name
      run: |
        IFS='-'
        read -a arr <<< ${{ matrix.os }}
        echo "os_name=${arr[0]}" >> "${GITHUB_ENV}"
      shell: bash
    ## Install Qt
    - if: contains(matrix.os, 'ubuntu')
      name: Install Qt (Linux)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'linux'
        target: ${{ matrix.qt-target }}
    - if: contains(matrix.os, 'windows')
      name: Install Qt (Windows)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'windows'
        arch: 'win64_mingw${{ matrix.qt-mingw-version }}'
        target: ${{ matrix.qt-target }}
    - if: contains(matrix.os, 'macos')
      name: Install Qt (macOS)
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        host: 'mac'
        target: ${{ matrix.qt-target }}
    - if: contains(matrix.os, 'windows')
      name: Install MinGW (Windows)
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: x64
        version: ${{ matrix.mingw-version }}
    ## Build
    - if: contains(matrix.os, 'ubuntu')
      name: Build (Linux)
      run: |
        qmake
        make -j$(nproc --all)
      shell: bash
    - if: contains(matrix.os, 'windows')
      name: Build (Windows)
      run: |
        qmake
        mingw32-make.exe -j4
      shell: bash
    - if: contains(matrix.os, 'macos')
      name: Build (macOS)
      run: |
        qmake
        make -j6
      shell: bash
    - name: Get Qt major version
      run: |
        qt_version=${{ matrix.qt-version }}
        qt_version_arr=(${qt_version//./ })
        echo qt_major=${qt_version_arr[0]} >> "${GITHUB_ENV}"
      shell: bash
    - if: contains(matrix.os, 'ubuntu')
      name: Rename the library (Linux)
      run: for i in *.so; do mv $i qt${{ env.qt_major }}-x86_64-$i; done
      shell: bash
    - if: contains(matrix.os, 'windows')
      name: Rename the library (Windows)
      run: |
        cd release
        for i in *.dll; do mv $i qt${{ env.qt_major }}-x86_64-$i; done
        mv *.dll ..
      shell: bash
    - if: contains(matrix.os, 'macos')
      name: Rename the library (macOS)
      run: for i in *.dylib; do mv $i qt${{ env.qt_major }}-x86_64-$i; done
      shell: bash
    ## Upload
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ env.os_name }}-qt-${{ matrix.qt-version }}
        path: |
          *.so*
          *.dll*
          *.dylib*

  release:
    runs-on: ubuntu-latest
    needs: [build-release]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - run: |
        find
        ls build-ubuntu*/
        ls build-windows*/
        ls build-macos*/
      shell: bash
    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "build-ubuntu*/*.so,build-windows*/*.dll,build-macos*/*.dylib"
        name: "Template addon ${{ github.ref_name }}"
        owner: ${{ github.event.pusher.name }}
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
